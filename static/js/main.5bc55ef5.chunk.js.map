{"version":3,"sources":["components/MoreButton.js","components/ButtonsField.js","App.js","reportWebVitals.js","index.js"],"names":["MoreButton","pos","onClick","useState","currentClass","SetCurrentClass","posStyle","top","left","backgroundColor","console","log","useEffect","className","style","ButtonsField","onMore","poses","setPoses","divRef","useRef","rndPercent","Math","random","getRandomInt","min","max","ceil","floor","ref","map","p","cPos","forEach","isTouching","din","h","current","offsetHeight","w","offsetWidth","leftGap","rightGap","topGap","bottomGap","d","toString","newButtonPos","i","push","moreClick","App","pizzas","setPizza","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOA+BeA,MA5Bf,YAAoC,IAAfC,EAAc,EAAdA,IAAIC,EAAU,EAAVA,QACrB,EAAwCC,mBAAS,cAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAIMC,EAAW,CACfC,IAAKN,EAAI,GAAK,IACdO,KAAMP,EAAI,GAAM,IAChBQ,gBAAiBR,EAAI,IAevB,OAZAS,QAAQC,IAAIV,EAAI,IAKhBW,qBAAU,WACRP,EAAgB,oCAEf,IAKK,wBAAQQ,UAAWT,EAAcF,QAASA,EAASY,MAAOR,EAA1D,mBCuDGS,MA/Ef,YAAiC,IAAVC,EAAS,EAATA,OAEnB,EAA0Bb,mBAAS,CAAC,CAAC,GAAG,IAAG,KAA3C,mBAAOc,EAAP,KAAcC,EAAd,KAEMC,EAASC,mBAETC,EAAa,WAAQ,OAAwB,IAAjBC,KAAKC,UA2DvC,SAASC,EAAaC,EAAKC,GAGvB,OAFAD,EAAMH,KAAKK,KAAKF,GAChBC,EAAMJ,KAAKM,MAAMF,GACVJ,KAAKM,MAAMN,KAAKC,UAAYG,EAAMD,GAAOA,GAGpD,OACI,qBAAKZ,UAAU,eAAegB,IAAKV,EAAnC,SACKF,EAAMa,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAY9B,IAAK8B,EAAG7B,QAAS,kBAjErD,SAAmB8B,GAIff,EAAMgB,SAAQ,SAAAF,GACV,GAAIA,GAAKC,EAAM,CACX,IAAIE,GAAa,EACXC,EAAMX,EAAa,EAAE,GACrBY,EAAI,GAAGD,EAAMhB,EAAOkB,QAAQC,aAAe,IAC3CC,EAAI,IAAIJ,EAAMhB,EAAOkB,QAAQG,YAAc,IAE3CC,EAAYT,EAAK,IAAKD,EAAE,GAAKQ,GAC7BG,EAAYX,EAAE,IAAOC,EAAK,GAAKO,GAC/BI,EAAUX,EAAK,IAAKD,EAAE,GAAKK,GAC3BQ,EAAab,EAAE,IAAOC,EAAK,GAAMI,GAE/BK,EAAU,GACVC,EAAW,GACXC,EAAS,GACTC,EAAY,IACZV,GAAa,GAErB,IAAIW,EAAI,GAGJX,IAEIO,GAAWC,EACXX,EAAE,IAAMU,EAAQI,EALhB,EAOAd,EAAE,IAAMW,EAASG,EAPjB,EASAF,GAAUC,EACVb,EAAE,IAAMY,EAAOE,EAVf,EAYAd,EAAE,IAAMa,EAAUC,EAZlB,EAeJd,EAAE,GAAK,IAAMT,KAAKM,MAAoB,SAAdN,KAAKC,UAAmBuB,SAAS,SAMrE9B,IAIA,IADA,IAAI+B,EAAe,GACVC,EAAI,EAAGA,EAAExB,EAAa,EAAE,GAAGwB,IAEhCD,EAAaE,KAAK,CAAC5B,IAAaA,IAAa,IAEjDH,EAAS,GAAD,mBAAKD,GAAS8B,IAaiCG,CAAUnB,YCtD1DoB,MAlBf,WACE,MAA2BhD,mBAAS,GAApC,mBAAOiD,EAAP,KAAeC,EAAf,KAQA,OACE,sBAAKxC,UAAU,MAAf,UAEE,cAAC,EAAD,CAAcG,OAPL,WACXqC,EAASD,EAAO,MAOd,yCAAYA,EAAZ,iBCLSE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5bc55ef5.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport { isCompositeComponentWithType } from 'react-dom/test-utils';\r\n\r\nfunction MoreButton({pos,onClick}) {\r\n    const [currentClass, SetCurrentClass] = useState(\"moreButton\")\r\n  \r\n    \r\n\r\n    const posStyle = {\r\n      top: pos[0] + \"%\",    \r\n      left: pos[1]  + \"%\",\r\n      backgroundColor: pos[2]\r\n    };\r\n\r\n    console.log(pos[2]);\r\n    \r\n    //backgroundColor: pos[2] ? \"#ff9c00\" : \"default\"\r\n//left: (pos[1]) / 100 * (contWidth - butWidth)\r\n\r\n    useEffect(() => {\r\n      SetCurrentClass(\"moreButton moreButtonAfterLoad\")\r\n      //pos[2] = \"#\" + Math.floor(Math.random()*16777215).toString(16) \r\n    }, [])\r\n\r\n    \r\n\r\n    return (\r\n            <button className={currentClass} onClick={onClick} style={posStyle}>more</button>\r\n    )\r\n}\r\n\r\nexport default MoreButton\r\n","import React, {useEffect, useState, useRef} from 'react'\r\nimport MoreButton from './MoreButton.js';\r\n\r\nfunction ButtonsField({onMore}) {\r\n    \r\n    const [poses, setPoses] = useState([[50,50,false]]);\r\n    \r\n    const divRef = useRef();  \r\n\r\n    const rndPercent = () => { return Math.random() * (100) }\r\n\r\n    function moreClick(cPos) {\r\n    \r\n\r\n        //Change poses touching clicked pos\r\n        poses.forEach(p => {\r\n            if (p != cPos) {\r\n                let isTouching = false;\r\n                const din = getRandomInt(1,6)\r\n                const h = 50*din / divRef.current.offsetHeight * 100\r\n                const w = 100*din / divRef.current.offsetWidth * 100\r\n\r\n                const leftGap =  (cPos[1])-(p[1] + w)\r\n                const rightGap = (p[1]) - (cPos[1] + w)\r\n                const topGap = (cPos[0])-(p[0] + h) \r\n                const bottomGap = (p[0]) - (cPos[0]  + h)\r\n\r\n                    if (leftGap < 0 &&\r\n                        rightGap < 0 &&\r\n                        topGap < 0 &&\r\n                        bottomGap < 0)\r\n                        isTouching = true;\r\n\r\n                let d = 0.4\r\n                let a = 3\r\n\r\n                if (isTouching)\r\n                {\r\n                    if (leftGap >= rightGap)\r\n                        p[1] += leftGap*d-a;\r\n                    else\r\n                        p[1] -= rightGap*d-a;\r\n\r\n                    if (topGap >= bottomGap)\r\n                        p[0] += topGap*d-a;\r\n                    else\r\n                        p[0] -= bottomGap*d-a;\r\n\r\n                    //cPos[2] = \"#\" + Math.floor(Math.random()*16777215).toString(16)\r\n                    p[2] = \"#\" + Math.floor(Math.random()*16777215).toString(16) \r\n                }\r\n            }\r\n        })\r\n\r\n        //Call component onMore event\r\n        onMore()\r\n\r\n        //Push new MoreButton\r\n        let newButtonPos = []\r\n        for (let i = 0; i<getRandomInt(1,4);i++)\r\n        {\r\n            newButtonPos.push([rndPercent(),rndPercent(),0])     \r\n        }\r\n        setPoses([...poses,...newButtonPos])\r\n        \r\n        \r\n    }\r\n\r\n    function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n      }\r\n  \r\n    return (\r\n        <div className=\"ButtonsField\" ref={divRef} >\r\n            {poses.map(p => <MoreButton pos={p} onClick={() => moreClick(p)}/>)}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonsField\r\n","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport ButtonsField from './components/ButtonsField.js';\n\nfunction App() {\n  const [pizzas, setPizza] = useState(0);\n  \n\n\n  const more = () => {\n    setPizza(pizzas+1)\n  }\n\n  return (\n    <div className=\"App\">\n     \n      <ButtonsField onMore={more}/>\n      <h1>i like {pizzas} pizzas</h1>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}